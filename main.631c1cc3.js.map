{"version":3,"sources":["scripts/main.js"],"names":["renderedField","document","querySelector","startMessage","winMessage","loseMessage","startButton","scoreLabel","scoreAmount","isGameStarted","isGameWon","isGameLost","isGameFieldChanged","currentScore","NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","WIN_SCORE","gameFieldX","initStartData","fill","innerText","classList","add","render","rows","children","i","length","cells","j","cell","remove","isZeroPresent","concat","some","item","getIndexesOfAllCellsWithZeros","zeros","map","value","index","filter","el","getRandomZeroCellCoordinates","randomIndex","getRandomValue","y","Math","floor","x","min","max","random","getSpecificValue","setSpecificValueIntoGameField","gameField","coords","transposeArray","matrix","_","colIndex","row","normalizeGameField","direction","newGameField","normalizeRow","reverse","isThereMove","zeroIndex","prevValueIndex","findIndex","isThereMoveInRow","addEventListener","arrowEvent","includes","key"],"mappings":"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","file":"main.631c1cc3.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst renderedField = document.querySelector('.game-field tbody');\r\nconst startMessage = document.querySelector('.message-start');\r\nconst winMessage = document.querySelector('.message-win');\r\nconst loseMessage = document.querySelector('.message-lose');\r\nconst startButton = document.querySelector('.start');\r\nconst scoreLabel = document.querySelector('.game-score');\r\nlet scoreAmount = 0;\r\nlet isGameStarted = false;\r\nlet isGameWon = false;\r\nlet isGameLost = false;\r\nlet isGameFieldChanged = false;\r\n\r\nlet currentScore = 0;\r\n\r\nconst NUMBER_OF_ROWS = 4;\r\nconst NUMBER_OF_COLUMNS = NUMBER_OF_ROWS;\r\nconst WIN_SCORE = 2048;\r\n\r\nlet gameFieldX = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\ndocument.addEventListener('onload', render());\r\n\r\nstartButton.addEventListener('click', () => {\r\n  isGameStarted = true;\r\n  startMessage.classList.add('hidden');\r\n  initStartData();\r\n  setSpecificValueIntoGameField(gameFieldX);\r\n  setSpecificValueIntoGameField(gameFieldX);\r\n  render();\r\n});\r\n\r\nfunction initStartData() {\r\n  for (const row of gameFieldX) {\r\n    row.fill(0);\r\n  }\r\n\r\n  isGameLost = false;\r\n  isGameWon = false;\r\n  startButton.innerText = 'Restart';\r\n  startButton.classList.add('restart');\r\n  winMessage.classList.add('hidden');\r\n  loseMessage.classList.add('hidden');\r\n  render();\r\n}\r\n\r\nfunction render() {\r\n  scoreLabel.innerText = scoreAmount;\r\n\r\n  const rows = renderedField.children;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const cells = rows[i].children;\r\n\r\n    for (let j = 0; j < cells.length; j++) {\r\n      const cell = cells[j];\r\n\r\n      cell.classList.remove(`field-cell--${cell.innerText}`);\r\n      cell.innerText = gameFieldX[i][j] === 0 ? '' : gameFieldX[i][j];\r\n      cell.classList.add(`field-cell--${gameFieldX[i][j]}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction isZeroPresent() {\r\n  return [].concat(...gameFieldX).some(item => item === 0);\r\n}\r\n\r\nfunction getIndexesOfAllCellsWithZeros() {\r\n  const zeros = [].concat(...gameFieldX)\r\n    .map((value, index) => ({\r\n      value, index,\r\n    }))\r\n    .filter(el => el.value === 0)\r\n    .map(el => el.index);\r\n\r\n  return zeros;\r\n}\r\n\r\nfunction getRandomZeroCellCoordinates() {\r\n  const zeros = getIndexesOfAllCellsWithZeros();\r\n\r\n  const randomIndex = getRandomValue(0, zeros.length - 1);\r\n\r\n  return {\r\n    y: Math.floor(zeros[randomIndex] / NUMBER_OF_COLUMNS),\r\n    x: zeros[randomIndex] % NUMBER_OF_COLUMNS,\r\n  };\r\n}\r\n\r\nfunction getRandomValue(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction getSpecificValue() {\r\n  const value = getRandomValue(1, 10);\r\n\r\n  return value === 4 ? value : 2;\r\n}\r\n\r\nfunction setSpecificValueIntoGameField(gameField) {\r\n  if (isZeroPresent()) {\r\n    const coords = getRandomZeroCellCoordinates();\r\n\r\n    gameField[coords.y][coords.x] = getSpecificValue();\r\n  }\r\n}\r\n\r\nfunction transposeArray(matrix) {\r\n  return matrix.map((_, colIndex) => matrix.map(row => row[colIndex]));\r\n}\r\n\r\nfunction normalizeGameField(gameField, direction) {\r\n  const newGameField = (direction === 'ArrowLeft' || direction === 'ArrowRight')\r\n    ? [...gameField]\r\n    : transposeArray(gameField);\r\n\r\n  for (let i = 0; i < newGameField.length; i++) {\r\n    newGameField[i] = (direction === 'ArrowLeft' || direction === 'ArrowUp')\r\n      ? normalizeRow(newGameField[i])\r\n      : normalizeRow(newGameField[i].reverse()).reverse();\r\n  }\r\n\r\n  gameFieldX = (direction === 'ArrowLeft' || direction === 'ArrowRight')\r\n    ? newGameField\r\n    : transposeArray(newGameField);\r\n\r\n  isGameLost = !isZeroPresent()\r\n    && !isThereMove(gameFieldX)\r\n    && !isThereMove(transposeArray(gameFieldX));\r\n\r\n  if (isGameLost) {\r\n  }\r\n}\r\n\r\ndocument.addEventListener('keydown', (arrowEvent) => {\r\n  const keys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\r\n\r\n  if (isGameStarted && keys.includes(arrowEvent.key)) {\r\n    normalizeGameField(gameFieldX, arrowEvent.key);\r\n\r\n    if (isGameFieldChanged) {\r\n      setSpecificValueIntoGameField(gameFieldX);\r\n      isGameFieldChanged = false;\r\n    }\r\n\r\n    if (isGameWon) {\r\n      isGameStarted = false;\r\n      startMessage.classList.add('hidden');\r\n      winMessage.classList.remove('hidden');\r\n    }\r\n\r\n    if (isGameLost) {\r\n      isGameStarted = false;\r\n      startMessage.classList.add('hidden');\r\n      loseMessage.classList.remove('hidden');\r\n    }\r\n    render();\r\n  }\r\n});\r\n\r\nfunction normalizeRow(row) {\r\n  let zeroIndex = row.findIndex(el => el === 0);\r\n  let prevValueIndex;\r\n\r\n  for (let i = 0; i < row.length; i++) {\r\n    if (row[i] !== 0) {\r\n      if (row[prevValueIndex] === row[i]) {\r\n        currentScore = row[i] * 2;\r\n        row[prevValueIndex] = currentScore;\r\n        scoreAmount += currentScore;\r\n        prevValueIndex = i;\r\n        row[i] = 0;\r\n\r\n        if (!isGameWon) {\r\n          isGameWon = currentScore === WIN_SCORE;\r\n        }\r\n        isGameFieldChanged = true;\r\n      } else {\r\n        prevValueIndex = i;\r\n      }\r\n\r\n      if (zeroIndex < i && zeroIndex >= 0) {\r\n        row[zeroIndex] = row[i];\r\n        row[i] = 0;\r\n        prevValueIndex = zeroIndex;\r\n        isGameFieldChanged = true;\r\n      }\r\n      zeroIndex = row.findIndex(el => el === 0);\r\n    }\r\n  }\r\n\r\n  return row;\r\n}\r\n\r\nfunction isThereMoveInRow(row) {\r\n  for (let i = 0; i < row.length - 1; i++) {\r\n    if (row[i] === row[i + 1]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isThereMove(gameField) {\r\n  for (const row of gameField) {\r\n    if (isThereMoveInRow(row)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n"]}